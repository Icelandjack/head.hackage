diff -ru constraints-0.9.1.orig/constraints.cabal constraints-0.9.1/constraints.cabal
--- constraints-0.9.1.orig/constraints.cabal	2017-12-11 14:15:15.576563032 +0000
+++ constraints-0.9.1/constraints.cabal	2017-12-11 14:25:10.160619151 +0000
@@ -48,6 +48,7 @@
     ghc-prim,
     hashable >= 1.2 && < 1.3,
     mtl >= 2 && < 2.3,
+    semigroups >= 0.11 && < 0.19,
     transformers >= 0.2 && < 0.6,
     transformers-compat >= 0.4 && < 1
 
diff -ru constraints-0.9.1.orig/src/Data/Constraint/Lifting.hs constraints-0.9.1/src/Data/Constraint/Lifting.hs
--- constraints-0.9.1.orig/src/Data/Constraint/Lifting.hs	2017-12-11 15:07:37.023705859 +0000
+++ constraints-0.9.1/src/Data/Constraint/Lifting.hs	2017-12-11 15:07:45.991476779 +0000
@@ -54,6 +54,9 @@
 import Data.Monoid
 #endif
 import Data.Ratio
+#if !(MIN_VERSION_base(4,11,0))
+import Data.Semigroup
+#endif
 #if __GLASGOW_HASKELL__ < 710
 import Data.Traversable
 #endif
@@ -77,6 +80,7 @@
 instance Lifting Hashable Maybe where lifting = Sub Dict
 instance Lifting Binary Maybe where lifting = Sub Dict
 instance Lifting NFData Maybe where lifting = Sub Dict
+instance Lifting Semigroup Maybe where lifting = Sub Dict
 instance Lifting Monoid Maybe where lifting = Sub Dict
 
 instance Lifting Eq Ratio where lifting = Sub Dict
@@ -85,7 +89,7 @@
 instance Lifting Eq Complex where lifting = Sub Dict
 instance Lifting Read Complex where lifting = Sub Dict
 instance Lifting Show Complex where lifting = Sub Dict
-
+instance Lifting Semigroup ((->) a) where lifting = Sub Dict
 instance Lifting Monoid ((->) a) where lifting = Sub Dict
 
 instance Eq a => Lifting Eq (Either a) where lifting = Sub Dict
@@ -103,6 +107,7 @@
 instance Hashable a => Lifting Hashable ((,) a) where lifting = Sub Dict
 instance Binary a => Lifting Binary ((,) a) where lifting = Sub Dict
 instance NFData a => Lifting NFData ((,) a) where lifting = Sub Dict
+instance Semigroup a => Lifting Semigroup ((,) a) where lifting = Sub Dict
 instance Monoid a => Lifting Monoid ((,) a) where lifting = Sub Dict
 instance Bounded a => Lifting Bounded ((,) a) where lifting = Sub Dict
 instance Ix a => Lifting Ix ((,) a) where lifting = Sub Dict
@@ -434,6 +439,7 @@
 instance Lifting2 Hashable (,) where lifting2 = Sub Dict
 instance Lifting2 Binary (,) where lifting2 = Sub Dict
 instance Lifting2 NFData (,) where lifting2 = Sub Dict
+instance Lifting2 Semigroup (,) where lifting2 = Sub Dict
 instance Lifting2 Monoid (,) where lifting2 = Sub Dict
 instance Lifting2 Bounded (,) where lifting2 = Sub Dict
 instance Lifting2 Ix (,) where lifting2 = Sub Dict
diff -ru constraints-0.9.1.orig/src/Data/Constraint/Nat.hs constraints-0.9.1/src/Data/Constraint/Nat.hs
--- constraints-0.9.1.orig/src/Data/Constraint/Nat.hs	2017-03-13 14:35:11.000000000 +0000
+++ constraints-0.9.1/src/Data/Constraint/Nat.hs	2017-12-11 14:27:39.277908760 +0000
@@ -42,7 +42,7 @@
 
 import Data.Constraint
 import Data.Proxy
-import GHC.TypeLits
+import GHC.TypeLits hiding (type Div, type Mod)
 import Unsafe.Coerce
 
 type family Min :: Nat -> Nat -> Nat where
diff -ru constraints-0.9.1.orig/src/Data/Constraint.hs constraints-0.9.1/src/Data/Constraint.hs
--- constraints-0.9.1.orig/src/Data/Constraint.hs	2017-03-13 14:35:11.000000000 +0000
+++ constraints-0.9.1/src/Data/Constraint.hs	2017-12-11 14:25:10.160619151 +0000
@@ -618,8 +618,27 @@
 instance RealFloat a :=> RealFloat (Const a b) where ins = Sub Dict
 #endif
 
+-- Semigroup
+instance Class () (Semigroup a) where cls = Sub Dict
+instance () :=> Semigroup () where ins = Sub Dict
+instance () :=> Semigroup Ordering where ins = Sub Dict
+instance () :=> Semigroup [a] where ins = Sub Dict
+instance Semigroup a :=> Semigroup (Maybe a) where ins = Sub Dict
+instance (Semigroup a, Semigroup b) :=> Semigroup (a, b) where ins = Sub Dict
+instance Semigroup a :=> Semigroup (Const a b) where ins = Sub Dict
+#if MIN_VERSION_base(4,9,0)
+instance Semigroup a :=> Semigroup (Identity a) where ins = Sub Dict
+#endif
+#if MIN_VERSION_base(4,10,0)
+instance Semigroup a :=> Semigroup (IO a) where ins = Sub Dict
+#endif
+
 -- Monoid
+#if MIN_VERSION_base(4,11,0)
+instance Class (Semigroup a) (Monoid a) where cls = Sub Dict
+#else
 instance Class () (Monoid a) where cls = Sub Dict
+#endif
 instance () :=> Monoid () where ins = Sub Dict
 instance () :=> Monoid Ordering where ins = Sub Dict
 instance () :=> Monoid [a] where ins = Sub Dict
@@ -628,8 +647,6 @@
 instance Monoid a :=> Monoid (Const a b) where ins = Sub Dict
 #if MIN_VERSION_base(4,9,0)
 instance Monoid a :=> Monoid (Identity a) where ins = Sub Dict
-#endif
-#if MIN_VERSION_base(4,9,0)
 instance Monoid a :=> Monoid (IO a) where ins = Sub Dict
 #endif
 
@@ -700,7 +717,13 @@
 instance a :=> Read (Dict a) where ins = Sub Dict
 deriving instance a => Read (Dict a)
 
+instance () :=> Semigroup (Dict a) where ins = Sub Dict
+instance Semigroup (Dict a) where
+  Dict <> Dict = Dict
+
 instance a :=> Monoid (Dict a) where ins = Sub Dict
 instance a => Monoid (Dict a) where
-  mappend Dict Dict = Dict
+#if !(MIN_VERSION_base(4,11,0))
+  mappend = (<>)
+#endif
   mempty = Dict
